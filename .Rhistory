data <- as.character(transpose2)
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(list(data,save_indices))
}
keepSilbeExample <- textKeepSilbe(values)
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
keepSilbeExample <- textKeepSilbe(values)
textKeepSilbe <- function(data, nullTokens = TRUE){
dummyData <- data.frame(data)
dummyData <- toString(dummyData[,1])
dummyData <- str_replace_all(dummyData, "-, -", "-")
dummyData <- str_replace_all(dummyData, ",", "")
indices <- str_locate_all(dummyData, "-")
getIndices <- function(index, iteration){
getIndex <- index - iteration
}
save_length <- length(indices[[1]])/2
iterations <- 1:save_length
iterations <- as.data.frame(iterations)
save_indices <- apply(iterations, 1, function(x){getIndices(indices[[1]][x], x)})
if(nullTokens == FALSE){
data <- as.data.frame(data)
data <- toString(data[,1])
data <- str_replace_all(data, "-, -", "")
data <- str_replace_all(data, ",", "")
data <- as.list(strsplit(data, '\\s+')[[1]])
transpose1 <- t(data)
transpose2 <- t(transpose1)
data <- as.character(transpose2)
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(list(data,save_indices))
}
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
keepSilbeExample <- textKeepSilbe(values)
keepSilbeExample
values3
keepSilbeExample[[2]]
class(keepSilbeExample[[2]])
save_index <- keepSilbeExample[[2]]
save_index <- as.vector(keepSilbeExample[[2]])
save_index
save_index[1]
save_index[2]
inject <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index,
to = index-1,
replacement = replacement)
}
keepSilbeExample <- textKeepSilbe(values)
save_index <- as.vector(keepSilbeExample[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
inject(values3, save_index, "-")
textKeepSilbe <- function(data, nullTokens = TRUE){
dummyData <- data.frame(data)
dummyData <- toString(dummyData[,1])
dummyData <- str_replace_all(dummyData, "-, -", "-")
dummyData <- str_replace_all(dummyData, ",", "")
indices <- str_locate_all(dummyData, "-")
getIndices <- function(index, iteration){
getIndex <- index - iteration + 1
}
save_length <- length(indices[[1]])/2
iterations <- 1:save_length
iterations <- as.data.frame(iterations)
save_indices <- apply(iterations, 1, function(x){getIndices(indices[[1]][x], x)})
if(nullTokens == FALSE){
data <- as.data.frame(data)
data <- toString(data[,1])
data <- str_replace_all(data, "-, -", "")
data <- str_replace_all(data, ",", "")
data <- as.list(strsplit(data, '\\s+')[[1]])
transpose1 <- t(data)
transpose2 <- t(transpose1)
data <- as.character(transpose2)
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(list(data,save_indices))
}
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
inject <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index,
to = index-1,
replacement = replacement)
}
keepSilbeExample <- textKeepSilbe(values)
save_index <- as.vector(keepSilbeExample[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
inject(values3, save_index, "-")
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index,
to = index-1,
replacement = replacement)
}
keepSilbeExample <- textKeepSilbe(values)
save_index <- as.vector(keepSilbeExample[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "-")
reverseSave
class(reverseSave)
reverseSave <- as.vector(reverseSave)
reverseSave
reverseSave[1]
textKeepSilbe <- function(data, nullTokens = TRUE){
dummyData <- data.frame(data)
dummyData <- toString(dummyData[,1])
dummyData <- str_replace_all(dummyData, "-, -", "-")
dummyData <- str_replace_all(dummyData, ",", "")
indices <- str_locate_all(dummyData, "-")
getIndices <- function(index, iteration){
getIndex <- index - iteration + 1
}
save_length <- length(indices[[1]])/2
iterations <- 1:save_length
iterations <- as.data.frame(iterations)
save_indices <- apply(iterations, 1, function(x){getIndices(indices[[1]][x], x)})
if(nullTokens == FALSE){
data <- as.data.frame(data)
data <- toString(data[,1])
data <- str_replace_all(data, "-, -", "")
data <- str_replace_all(data, ",", "")
data <- as.list(strsplit(data, '\\s+')[[1]])
transpose1 <- t(data)
transpose2 <- t(transpose1)
data <- as.character(transpose2)
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(list(data,save_indices))
}
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index,
to = index-1,
replacement = replacement)
}
keepSilbeExample <- textKeepSilbe(values)
save_index <- as.vector(keepSilbeExample[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "-")
reverseSave
word_count <- str_count(reverseSave, '\\w+')
word_count
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index,
to = index-1,
replacement = replacement)
}
keepSilbeExample <- textKeepSilbe(values)
save_index <- as.vector(keepSilbeExample[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
reverseSave
word_count
word(string = reverseSave, start = 1, end = word_count, sep = fixed(" "))
saveWords <- word(string = reverseSave, start = 1, end = word_count, sep = fixed(" "))
saveWords
saveWords[1]
saveWords[[1]]
reverseSave[1]
reverseSave
reverseSave2 <- as.character(reverseSave)
reverseSave2
reverseSave2[1]
reverseSave2 <- as.vector(reverseSave)
reverseSave2
reverseSave2[1]
head(strsplit(reverseSave, split = "\ "), word_count)
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index,
to = index-1,
replacement = replacement)
}
keepSilbeExample <- textKeepSilbe(values)
save_index <- as.vector(keepSilbeExample[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords
saveWords[1]
saveWords[[1]][1]
saveWords[[1]][2]
saveWords2 <- unlist(saveWords)
saveWords2
saveWords2[1]
saveWords2
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
keepSilbeExample <- textKeepSilbe(values)
printSilbeFormat(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
saveWords3 <- t(saveWords2)
return(saveWords3)
}
printSilbeFormat(keepSilbeExample)
keepSilbeExample
keepSilbeExample <- textKeepSilbe(values, nullTokens = FALSE)
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
mcf <- readHumdrum('.*rap')
devtools::install_github("Computational-Cognitive-Musicology-Lab/humdrumR", build_vignettes = TRUE)
library(humdrumR)
census(mcf)
reference(mcf)
warnings(0)
warnings()
View(reference(mcf))
spines(mcf)
View(spines(mcf))
interpretations(mcf)
View(interpreations(mcf))
View(interpretations(mcf))
interpretations(mcf)[["Tandem"]][["Number"]]
sections(mcf)
library(humdrumR)
sections(mcf)
?humdrumR
section(mcf)
