# set new value in chain
}
else{
chain[i] <- z
# keep z value for the chain
}
}
return(chain)
}
chain1 <- metropolisHastingsMixture(0,10000,mixturemodel,0.01,3)
plot(chain1, type = "l")
# trace plot
hist(chain1)
lines(density(chain1[3:10000]), lwd = 2, col = "blue")
install.packages('devtools')
rm(list = ls())
getwd
getwd()
setwd("/Users/robbyice/Desktop/GTPortfolio/humdrumR")
getwd()
devtools::install_github("Computational-Cognitive-Musicology-Lab/humdrumR", build_vignettes = TRUE)
mcf <- readHumdrum('.*rap')
# test summary functions again
library(humdrumR)
mcf <- readHumdrum('.*rap')
census(mcf)
reference(mcf)
spines(mcf)
interpretations(mcf)
sections(mcf)
summary(mcf)
View(summary(mcf))
?summary
?humdrumR::summary
library(humdrumR)
humdrumR::summary
summary(mcf)
View(summary(mcf))
View(reference(mcf))
View(spines(mcf))
interpretations(mcf)
View(interpretations(mcf))
interpretations(mcf)
summary(mcf)
census(mcf)
View(reference(mcf))
getwd()
mcf
?filterHumdrum
mcf[1]
mcf[2]
mcf[[2]]
mcf[1,]
system.time(mcf[1])
system.time(mcf[1,])
system.time(mcf[1,])
system.time(mcf[1])
mcf[2,]
mcf[[1,]]
mcf[1][1]
mcf[[,1]]
mcf[[,2]]
mcf[[,20]]
mcf[[,8]]
mcf[[,7]]
mcf[[,6]]
mcf[[,5]]
mcf[[,8]]
mcf[[,4]]
mcf[[,3]]
mcf[[,4]]
getwd()
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
data <- as.data.frame(values)
data[,1]
data
toString(values)
toString(data[,1])
#'  #       Now
#'  #       let
#'  #        me
#'  #   welcome
#'  # everybody
#'  #        to
#'  #       the
#'  #      wild
#'  #      wild
#'  #     west.
text <- function(data, nullTokens = TRUE){
if(nullTokens == FALSE){
data <- as.data.frame(data)
# transform character vector to data frame
data <- toString(data[,1])
# transform character vector to string *seems as though we might not need to transform to data frame above then*
data <- str_replace_all(data, "-, -", "")
# remove all instances of -, -, which represents a space between two syllables which when combined form a word
data <- str_replace_all(data, ",", "")
# remove all instances of , which occur after every word except the last one
data <- as.list(strsplit(data, '\\s+')[[1]])
# get all of the words as a list
transpose1 <- t(data)
transpose2 <- t(transpose1)
data <- as.character(transpose2)
# transform the data further to get desired character vector
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(data)
}
# test 1
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
new <- text(values)
textKeepSilbe <- function(data, nullTokens = TRUE){
# same function as text but it returns a list with the first element being the character vector of words and the second item being the indices at which to insert -'s.
dummyData <- data.frame(data)
dummyData <- toString(dummyData[,1])
dummyData <- str_replace_all(dummyData, "-, -", "-")
dummyData <- str_replace_all(dummyData, ",", "")
indices <- str_locate_all(dummyData, "-")
getIndices <- function(index, iteration){
# get index where you should insert a - to indicate splitting into syllables.
getIndex <- index - iteration + 1
}
save_length <- length(indices[[1]])/2
# length of indices will be the above length divided by 2 because it prints each index twice.
iterations <- 1:save_length
# iterations for apply function will equal length of indices
iterations <- as.data.frame(iterations)
# save as data frame so it can be read into apply function properly.
save_indices <- apply(iterations, 1, function(x){getIndices(indices[[1]][x], x)})
# save indices in a vector
# all code below is the same as in the original text function
if(nullTokens == FALSE){
data <- as.data.frame(data)
data <- toString(data[,1])
data <- str_replace_all(data, "-, -", "")
data <- str_replace_all(data, ",", "")
data <- as.list(strsplit(data, '\\s+')[[1]])
transpose1 <- t(data)
transpose2 <- t(transpose1)
data <- as.character(transpose2)
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
# define the above functions in the same way as in the original text function
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
# the logic below is the same as in the original text function
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(list(data,save_indices))
}
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
keepSilbeExample <- textKeepSilbe(values, nullTokens = FALSE)
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(save_index)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
keepSilbeExample <- textKeepSilbe(values, nullTokens = FALSE)
library(stringr)
textKeepSilbe <- function(data, nullTokens = TRUE){
# same function as text but it returns a list with the first element being the character vector of words and the second item being the indices at which to insert -'s.
dummyData <- data.frame(data)
dummyData <- toString(dummyData[,1])
dummyData <- str_replace_all(dummyData, "-, -", "-")
dummyData <- str_replace_all(dummyData, ",", "")
indices <- str_locate_all(dummyData, "-")
getIndices <- function(index, iteration){
# get index where you should insert a - to indicate splitting into syllables.
getIndex <- index - iteration + 1
}
save_length <- length(indices[[1]])/2
# length of indices will be the above length divided by 2 because it prints each index twice.
iterations <- 1:save_length
# iterations for apply function will equal length of indices
iterations <- as.data.frame(iterations)
# save as data frame so it can be read into apply function properly.
save_indices <- apply(iterations, 1, function(x){getIndices(indices[[1]][x], x)})
# save indices in a vector
# all code below is the same as in the original text function
if(nullTokens == FALSE){
data <- as.data.frame(data)
data <- toString(data[,1])
data <- str_replace_all(data, "-, -", "")
data <- str_replace_all(data, ",", "")
data <- as.list(strsplit(data, '\\s+')[[1]])
transpose1 <- t(data)
transpose2 <- t(transpose1)
data <- as.character(transpose2)
}
else{
wordAddSpace <- function(value){
if(substr(value,1,1) == "-"){
return(TRUE)
}
else{
return(FALSE)
}
}
replaceWithNullToken <- function(booleanValue){
if(booleanValue == TRUE){
return(".")
}
else{
return("word")
}
}
# define the above functions in the same way as in the original text function
saveData <- data
data <- as.data.frame(data)
save <- apply(data, 1, function(x){wordAddSpace(x)})
save <- as.data.frame(save)
# go through and if true then add space below
save2 <- apply(save, 1, function(x){replaceWithNullToken(x)})
save2 <- as.data.frame(save2)
saveWords <- text(saveData, nullTokens = FALSE)
saveWords <- as.data.frame(saveWords)
# the logic below is the same as in the original text function
newFunction <- function(dataValue, rowValue){
rowValueToString <- toString(rowValue)
dataValue[rowValue,1] <- paste(dataValue[rowValue,1], rowValueToString, sep = "")
return(dataValue[rowValue,1])
}
newFunction2 <- function(findRowValues, iteration){
getRowValueFinal <- sub("word*", "", findRowValues[iteration,1])
return(getRowValueFinal)
}
newFunction4 <- function(iterate, final, wordsArray){
iterateToString <- toString(iterate)
if(iterateToString %in% final){
return(wordsArray[match(iterate,final),1])
}
else{
return(".")
}
}
numbers <- 1:nrow(save2)
numbers <- as.data.frame(numbers)
saveNew <- apply(numbers, 1, function(x){newFunction(save2,x)})
saveNew <- as.data.frame(saveNew)
saveNew <- saveNew[!grepl(".", saveNew$saveNew, fixed = TRUE),]
finalData <- numbers
finalWordsLength <- 1:nrow(saveWords)
finalWordsLength <- as.data.frame(finalWordsLength)
saveNewDataFrame <- as.data.frame(saveNew)
finalData <- apply(finalWordsLength, 1, function(x){newFunction2(saveNewDataFrame, x)})
finalDataComplete <- apply(numbers, 1, function(x){newFunction4(x, finalData, saveWords)})
data <- (unlist(finalDataComplete))
}
return(list(data,save_indices))
}
values <- c('Now', 'let', 'me', 'wel-', '-come', 'e-', '-very-', '-bo-', '-dy', 'to', 'the', 'wild', 'wild', 'west.')
keepSilbeExample <- textKeepSilbe(values, nullTokens = FALSE)
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(save_index)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
keepSilbeExample[[2]]
keepSilbeExample[[1]]
values
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(values)
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
as.vector(keepSilbeExample[[2]])
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(keepSilbeOutput[[1]])
# values2 <- str_replace_all(values, "-, -", "")
# values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(keepSilbeOutput[[1]])
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
values <- toString(keepSilbeExample[[1]])
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
values3
reverseSave <- reverse(values, save_index, "- -")
reverseSave <- reverse(values, as.vector(keepSilbeExample[[2]]), "- -")
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
reverseSave <- reverse(values, as.vector(keepSilbeExample[[2]]), "- -")
reverseSave
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
values <- toString(keepSilbeOutput[[1]])
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
reverseSave <- reverse(values3, save_index, "- -")
word_count <- str_count(reverseSave, '\\w+')
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
# run the above function on an example for input into the print silbe format function
printSilbeFormat <- function(keepSilbeOutput){
reverse <- function(string, index, replacement){
stringi::stri_sub_replace_all(string, from = index, to = index-1, replacement = replacement)
}
# the above function is where the bijection occurs
save_index <- as.vector(keepSilbeOutput[[2]])
# save indices based on input
values <- toString(keepSilbeOutput[[1]])
# convert character vector to string for stringr usage
values2 <- str_replace_all(values, "-, -", "")
values3 <- str_replace_all(values2, ",", "")
# get just words with spaces in between each
reverseSave <- reverse(values3, save_index, "- -")
# use reverse function to input dashes in correct spots
word_count <- str_count(reverseSave, '\\w+')
# count number of words based on spaces
saveWords <- head(strsplit(reverseSave, split = "\ "), word_count)
# save words in list
saveWords2 <- unlist(saveWords)
return(saveWords2)
}
printSilbeFormat(keepSilbeExample)
