#    Can also look at how the distance between two internal rhyming words interacts with the number of non-rhyming words occurring before the first instance of an internal rhyming word
#    since there has been so much time passing without a rhyme. Ties back to original theory where which is more likely? Becomes increasingly unlikely to hear a rhyme. Compare
#    to when there's a rhyme at the end of one line and also the beginning of next one.
# 8. Does perception of rhyme differ when you flip the order of a double internal rhyme? I.e. is ab ab perceived the same or in a similar way as ba ab. I.e. inverse. Same for jJj and JjJ?
recordFreqDifference <- function(table){
if(NCOL(table$internalRhymesList) == 0){
return(0)
}
# record frequency difference between non rhyming words and the most frequent internal rhyme
df <- as.data.frame(table)
nonRhymingWordFrequency <- df[,1]
vector <- which(colnames(table$internalRhymesList) != ".")
if(length(vector) >= 1){
maxInternalRhyme <- max(table$internalRhymesList[,vector])
maxInternalRhymeIndex <- which(table$internalRhymesList == maxInternalRhyme)
difference <- nonRhymingWordFrequency - maxInternalRhyme
}
else{
return(0)
}
return(difference)
}
# implement functions
rhymeSchemes <- mcf$Token %hum<% c(~list(Rhyme), by ~ File ~ Phrase)
iteration <- 1:length(rhymeSchemes)
iteration <- cbind(iteration)
df <- rbind(rhymeSchemes)
df <- as.data.frame(t(df))
frequencyTables <- apply(iteration, 1, function(x){countFrequencies(df[x,1])})
frequencyTablesDataFrame <- cbind(frequencyTables)
# frequencyTablesDataFrame <- as.data.frame(frequencyTablesDataFrame)
internalRhymesList <- apply(iteration, 1, function(x){recordMoreThanOneInstance(frequencyTablesDataFrame[x][1])})
internalRhymesListDataFrame <- rbind(internalRhymesList)
internalRhymesListDataFrame <- as.data.frame(internalRhymesListDataFrame)
save <- apply(iteration, 1, function(x){as.data.frame(internalRhymesListDataFrame[1,x])})
# internalRhymesListDataFrame <- t(internalRhymesListDataFrame)
findMaxDifference <- apply(iteration, 1, function(x){recordFreqDifference(internalRhymesListDataFrame[1,x])})
maxDifference <- max(findMaxDifference)
# findMaxDifference <- apply(iteration, 1, function(x){recordFreqDifference(internalRhymesListDataFrame[1,x]$internalRhymesList)})
tableWithMaxDifference <- which(findMaxDifference == maxDifference)
findTableWithMaxDifference <- frequencyTables[tableWithMaxDifference]
# test function
df2 <- as.data.frame(frequencyTables[[968]])
determine <- which(df2$Freq > 1)
internalRhymes <- df2$frequencyCount[determine]
# test summary functions again
# library(humdrumR)
# mcf <- readHumdrum('.*rap')
# census(mcf)
# reference(mcf)
# spines(mcf)
# interpretations(mcf)
# sections(mcf)
# summary(mcf)
# largest distance between two internal rhymes
save <- rowRhymeSchemes[5,]$rhymeSchemes
indicesOfLetters <- which(save != ".")
letters <- save[indicesOfLetters]
# gsub("\\s*\\([^\\)]","s",as.character(rowRhymeSchemes[5,]$rhymeSchemes))
# gsub("\\s*\\)","t",as.character(rowRhymeSchemes[5,]$rhymeSchemes))
save2 <- replaceWithRepeating(rowRhymeSchemes[5,]$rhymeSchemes)
indices <- grep("bt", save2)
# function
library(humdrumR)
mcf <- readHumdrum('.*rap')
spinePipe(mcf, 2:8, 1) -> mcf[rev(c('Stress', 'Tone', 'Break', 'Rhyme', 'IPA', 'Lyrics', 'Hype'))]
segments <- function(x, reverse = FALSE) {
if (!is.logical(x)) x <- c(TRUE, head(x, -1L) != tail(x, -1L))
if (reverse) x <- rev(x)
x <- cumsum(x)
if (reverse) {
x <- rev(-x) + max(x) + 1
}
x
}
mcf$Token %hum>% c(~segments(Break %in% c('3', '4','5')), by ~ File) -> mcf$Phrase
mcf$Token %hum<% c(~list(paste(Lyrics, collapse = ' ')), by ~ File ~ Phrase)
rhymeSchemes <- mcf$Token %hum<% c(~list(Rhyme), by ~ File ~ Phrase)
rowRhymeSchemes <- cbind(rhymeSchemes)
replaceWithRepeating <- function(string){
save <- gsub("\\s*\\([^\\)]","s",as.character(string))
save <- gsub("\\s*\\)","t",as.character(save))
# this allows R to read these as repeating rhymes
return(save)
}
getIndices <- function(pattern1, wholeString){
if(length(pattern1) >= 1){
iteration <- 1:length(pattern1)
iteration <- cbind(iteration)
save11 <- apply(iteration, 1, function(x){
if(grepl("\\(", pattern1[x]) == TRUE){
pattern1[x] <- paste(pattern1[x], ")", sep = "")
}
if(grepl("\\[", pattern1[x]) == TRUE){
pattern1[x] <- paste(pattern1[x], "]", sep = "")
}
return(grep(pattern1[x], wholeString))
# if(length(grep(pattern1[x], wholeString)) > 1){
#   return(TRUE)
# }
# else{
#   return(FALSE)
# }
}
)
}
else{
return(0)
}
# if(length(pattern1) > 0){
#   iteration <- 1:length(pattern1)
#   iteration <- cbind(iteration)
#   save <- apply(iteration, 1, function(x){ grep(pattern1[x], wholeString)})
#   print(1)
#   return(save)
# }
# else{
#   return(-1)
# }
}
getIndicesOfLetters <- function(string){
if(length(string)<1){
return(0)
}
else{
return(which(string != "."))
}
}
iteration <- 1:length(indicesOfLetters)
iterationForRhymes <- 1:length(rhymeSchemes)
iterationForRhymes <- cbind(iterationForRhymes)
letters <- apply(iterationForRhymes, 1, function(x){getIndicesOfLetters(rowRhymeSchemes[x,]$rhymeSchemes)})
letters <- cbind(letters)
getPatterns <- apply(iterationForRhymes, 1, function(x){return(rowRhymeSchemes[x,]$rhymeSchemes[letters[x,]$letters])})
replaceWithRepeatingPrint <- apply(iterationForRhymes, 1, function(x){replaceWithRepeating(getPatterns[[x]])})
renameRhymeSchemes <- apply(iterationForRhymes, 1, function(x){replaceWithRepeating(rowRhymeSchemes[x,]$rhymeSchemes)})
convertToVectors <- apply(iterationForRhymes, 1, function(x){return(as.vector(replaceWithRepeatingPrint[[x]]))})
convertToVectors2 <- apply(iterationForRhymes, 1, function(x){return(as.vector(getPatterns[[x]]))})
checkIfInternalRhyme <- function(pattern2, wholeString2){
save3 <- list(FALSE)
if(length(pattern2) >= 1){
iteration <- 1:length(pattern2)
iteration <- cbind(iteration)
save3 <- apply(iteration, 1, function(x){
if(grepl("\\(", pattern2[x]) == TRUE){
pattern2[x] <- paste(pattern2[x], ")", sep = "")
}
if(grepl("\\[", pattern2[x]) == TRUE){
pattern2[x] <- paste(pattern2[x], "]", sep = "")
}
if(length(grep(pattern2[x], wholeString2)) > 1){
return(TRUE)
}
else{
return(FALSE)
}
}
)
}
else{
return(FALSE)
}
if(any(save3) == TRUE){
return(TRUE)
}
}
# save3 <- apply(iteration, 1, function(x){
#   if(grepl("\\(", convertToVectors2[[2]][x]) == TRUE){
#     convertToVectors2[[2]][x] <- paste(convertToVectors2[[2]][x], ")", sep = "")
#   }
#   if(grepl("\\[", convertToVectors2[[3]][x]) == TRUE){
#     convertToVectors2[[2]][x] <- paste(convertToVectors2[[2]][x], "]", sep = "")
#   }
#   if(length(grep(convertToVectors2[[2]][x], rhymeSchemes[[2]])) > 1){
#     return(TRUE)
#   }
#   else{
#     return(FALSE)
#   }
# }
#)
checkIfInternalRhymePrint <- apply(iterationForRhymes, 1, function(x){checkIfInternalRhyme(convertToVectors2[[x]], rhymeSchemes[[x]])})
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
library(stringr)
removeAmbiguousCharsFunc <- function(string){
newString <- str_replace_all(string, "[.]", "")
newString2 <- str_replace_all(newString, "[\\(]", "")
newString3 <- str_replace_all(newString2, "[\\)]", "")
newString4 <- str_replace_all(newString3, "[,]", "")
newString5 <- str_replace_all(newString4, "[ ]", "")
return(newString5)
}
calcDifferences <- function(rhymeScheme, letters, index){
return(diff(grep(substr(letters, index, index), rhymeScheme)))
}
returnMax <- function(numberList){
numbers <- unlist(numberList)
return(max(numbers))
}
checkIfInternalRhymePrint2 <- nullToNA(checkIfInternalRhymePrint)
library(tidyr)
# checkIfInternalRhymePrint3 <- cbind(checkIfInternalRhymePrint2)
# checkIfInternalRhymePrint4 <- as.data.frame(checkIfInternalRhymePrint3)
checkIfInternalRhymePrint5[is.na(checkIfInternalRhymePrint2)] <- FALSE
indices <- which(checkIfInternalRhymePrint5 == TRUE)
internalRhymesFinal <- rhymeSchemes[indices]
uniqchars <- function(string1){ unique(unlist(strsplit(string1, "")))}
iteration <- 1:length(internalRhymesFinal)
iteration <- cbind(iteration)
findUniqueChars <- apply(iteration, 1, function(x){uniqchars(internalRhymesFinal[[x]])})
removeAmbiguousChars <- apply(iteration, 1, function(x){removeAmbiguousCharsFunc(toString(findUniqueChars[[x]]))})
lengthsOfLetters <- apply(iteration, 1, function(x){return(nchar(removeAmbiguousChars[[x]]))})
saveDifferencesFinal <- apply(iteration, 1, function(x){calcDifferences(internalRhymesFinal[[x]], removeAmbiguousChars[[x]], lengthsOfLetters[x])})
maxDistances <- apply(iteration, 1, function(x){returnMax(saveDifferencesFinal[[x]])})
findMaxFinal <- max(maxDistances)
findIndexMaxFinal <- which(maxDistances == findMaxFinal)
maxInternalRhymeDifference <- internalRhymesFinal[[findIndexMaxFinal]]
iteration <- 1:length(replaceWithRepeatingPrint)
iteration <- cbind(iteration)
saveDifferences <- apply(iteration, 1, function(x){getIndices(replaceWithRepeatingPrint[[x]], renameRhymeSchemes[[x]])})
# findDifference <- function(vector1){
#   return(diff(range(vector1)))
# }
# saveDifferences2 <- lapply(iteration, function(x){findDifference(saveDifferences[[x]])})
# maxDifference <-
# getIndicesPrint <- apply(iterationForRhymes, 1, function(x){getIndices(convertToVectors[[x]], renameRhymeSchemes[[x]])})
# printDistance <- apply(iteration, 1, function(x){grep(rowRhymeSchemes[x], rowRhymeSchemes[5,]$rhymeSchemes)})
checkIfInternalRhymePrint2
checkIfInternalRhymePrint3 <- cbind(checkIfInternalRhymePrint2)
checkIfInternalRhymePrint4 <- as.data.frame(checkIfInternalRhymePrint3)
checkIfInternalRhymePrint4[is.na(checkIfInternalRhymePrint2)] <- FALSE
checkIfInternalRhymePrint4
checkIfInternalRhymePrint4[is.na(checkIfInternalRhymePrint4)] <- FALSE
indices <- which(checkIfInternalRhymePrint4 == TRUE)
internalRhymesFinal <- rhymeSchemes[indices]
uniqchars <- function(string1){ unique(unlist(strsplit(string1, "")))}
iteration <- 1:length(internalRhymesFinal)
iteration <- cbind(iteration)
findUniqueChars <- apply(iteration, 1, function(x){uniqchars(internalRhymesFinal[[x]])})
removeAmbiguousChars <- apply(iteration, 1, function(x){removeAmbiguousCharsFunc(toString(findUniqueChars[[x]]))})
lengthsOfLetters <- apply(iteration, 1, function(x){return(nchar(removeAmbiguousChars[[x]]))})
saveDifferencesFinal <- apply(iteration, 1, function(x){calcDifferences(internalRhymesFinal[[x]], removeAmbiguousChars[[x]], lengthsOfLetters[x])})
maxDistances <- apply(iteration, 1, function(x){returnMax(saveDifferencesFinal[[x]])})
findMaxFinal <- max(maxDistances)
findIndexMaxFinal <- which(maxDistances == findMaxFinal)
maxInternalRhymeDifference <- internalRhymesFinal[[findIndexMaxFinal]]
iteration <- 1:length(replaceWithRepeatingPrint)
iteration <- cbind(iteration)
saveDifferences <- apply(iteration, 1, function(x){getIndices(replaceWithRepeatingPrint[[x]], renameRhymeSchemes[[x]])})
findMaxFinal
maxInternalRhymeDifference
# test function
df2 <- as.data.frame(frequencyTables[[968]])
determine <- which(df2$Freq > 1)
internalRhymes <- df2$frequencyCount[determine]
internalRhymes
# largest distance between two internal rhymes
save <- rowRhymeSchemes[5,]$rhymeSchemes
save
library(humdrumR)
segments <- function(x, reverse = FALSE) {
if (!is.logical(x)) x <- c(TRUE, head(x, -1L) != tail(x, -1L))
if (reverse) x <- rev(x)
x <- cumsum(x)
if (reverse) {
x <- rev(-x) + max(x) + 1
}
x
}
mcf <- readHumdrum('.*rap')
spinePipe(mcf, 2:8, 1) -> mcf[rev(c('Stress', 'Tone', 'Break', 'Rhyme', 'IPA', 'Lyrics', 'Hype'))]
mcf$Token %hum>% c(~segments(Break %in% c('3', '4','5')), by ~ File) -> mcf$Phrase
mcf$Token %hum<% c(~list(paste(Lyrics, collapse = ' ')), by ~ File ~ Phrase)
rhymeSchemes <- mcf$Token %hum<% c(~list(Rhyme), by ~ File ~ Phrase)
countFrequencies <- function(element){
frequencyCount <- unlist(element)
frequencyCount <- table(frequencyCount)
return(frequencyCount)
}
recordMoreThanOneInstance <- function(table){
saveList <- unlist(table)
saveList <- as.data.frame(saveList)
saveList <- t(saveList)
determine <- which(saveList > 1)
saveList <- as.data.frame(saveList)
internalRhymes <- saveList[determine]
return(internalRhymes)
}
recordFreqDifference <- function(table){
if(NCOL(table$internalRhymesList) == 0){
return(0)
}
# record frequency difference between non rhyming words and the most frequent internal rhyme
df <- as.data.frame(table)
nonRhymingWordFrequency <- df[,1]
vector <- which(colnames(table$internalRhymesList) != ".")
if(length(vector) >= 1){
maxInternalRhyme <- max(table$internalRhymesList[,vector])
maxInternalRhymeIndex <- which(table$internalRhymesList == maxInternalRhyme)
difference <- nonRhymingWordFrequency - maxInternalRhyme
}
else{
return(0)
}
return(difference)
}
iteration <- 1:length(rhymeSchemes)
iteration <- cbind(iteration)
df <- rbind(rhymeSchemes)
df <- as.data.frame(t(df))
frequencyTables <- apply(iteration, 1, function(x){countFrequencies(df[x,1])})
frequencyTablesDataFrame <- cbind(frequencyTables)
internalRhymesList <- apply(iteration, 1, function(x){recordMoreThanOneInstance(frequencyTablesDataFrame[x][1])})
internalRhymesListDataFrame <- rbind(internalRhymesList)
internalRhymesListDataFrame <- as.data.frame(internalRhymesListDataFrame)
save <- apply(iteration, 1, function(x){as.data.frame(internalRhymesListDataFrame[1,x])})
findMaxDifference <- apply(iteration, 1, function(x){recordFreqDifference(internalRhymesListDataFrame[1,x])})
maxDifference <- max(findMaxDifference)
tableWithMaxDifference <- which(findMaxDifference == maxDifference)
findTableWithMaxDifference <- frequencyTables[tableWithMaxDifference]
tableWithMaxDifference
findTableWithMaxDifference <- frequencyTables[tableWithMaxDifference]
findTableWithMaxDifference
# test function
df2 <- as.data.frame(frequencyTables[[968]])
determine <- which(df2$Freq > 1)
internalRhymes <- df2$frequencyCount[determine]
internalRhymes
# largest distance between two internal rhymes
# function
rowRhymeSchemes <- cbind(rhymeSchemes)
replaceWithRepeating <- function(string){
save <- gsub("\\s*\\([^\\)]","s",as.character(string))
save <- gsub("\\s*\\)","t",as.character(save))
# this allows R to read these as repeating rhymes
return(save)
}
getIndices <- function(pattern1, wholeString){
if(length(pattern1) >= 1){
iteration <- 1:length(pattern1)
iteration <- cbind(iteration)
save11 <- apply(iteration, 1, function(x){
if(grepl("\\(", pattern1[x]) == TRUE){
pattern1[x] <- paste(pattern1[x], ")", sep = "")
}
if(grepl("\\[", pattern1[x]) == TRUE){
pattern1[x] <- paste(pattern1[x], "]", sep = "")
}
return(grep(pattern1[x], wholeString))
}
)
}
else{
return(0)
}
}
getIndicesOfLetters <- function(string){
if(length(string)<1){
return(0)
}
else{
return(which(string != "."))
}
}
iteration <- 1:length(indicesOfLetters)
iterationForRhymes <- 1:length(rhymeSchemes)
iterationForRhymes <- cbind(iterationForRhymes)
letters <- apply(iterationForRhymes, 1, function(x){getIndicesOfLetters(rowRhymeSchemes[x,]$rhymeSchemes)})
letters <- cbind(letters)
getPatterns <- apply(iterationForRhymes, 1, function(x){return(rowRhymeSchemes[x,]$rhymeSchemes[letters[x,]$letters])})
replaceWithRepeatingPrint <- apply(iterationForRhymes, 1, function(x){replaceWithRepeating(getPatterns[[x]])})
renameRhymeSchemes <- apply(iterationForRhymes, 1, function(x){replaceWithRepeating(rowRhymeSchemes[x,]$rhymeSchemes)})
convertToVectors <- apply(iterationForRhymes, 1, function(x){return(as.vector(replaceWithRepeatingPrint[[x]]))})
convertToVectors2 <- apply(iterationForRhymes, 1, function(x){return(as.vector(getPatterns[[x]]))})
checkIfInternalRhyme <- function(pattern2, wholeString2){
save3 <- list(FALSE)
if(length(pattern2) >= 1){
iteration <- 1:length(pattern2)
iteration <- cbind(iteration)
save3 <- apply(iteration, 1, function(x){
if(grepl("\\(", pattern2[x]) == TRUE){
pattern2[x] <- paste(pattern2[x], ")", sep = "")
}
if(grepl("\\[", pattern2[x]) == TRUE){
pattern2[x] <- paste(pattern2[x], "]", sep = "")
}
if(length(grep(pattern2[x], wholeString2)) > 1){
return(TRUE)
}
else{
return(FALSE)
}
}
)
}
else{
return(FALSE)
}
if(any(save3) == TRUE){
return(TRUE)
}
}
checkIfInternalRhymePrint <- apply(iterationForRhymes, 1, function(x){checkIfInternalRhyme(convertToVectors2[[x]], rhymeSchemes[[x]])})
nullToNA <- function(x) {
x[sapply(x, is.null)] <- NA
return(x)
}
library(stringr)
removeAmbiguousCharsFunc <- function(string){
newString <- str_replace_all(string, "[.]", "")
newString2 <- str_replace_all(newString, "[\\(]", "")
newString3 <- str_replace_all(newString2, "[\\)]", "")
newString4 <- str_replace_all(newString3, "[,]", "")
newString5 <- str_replace_all(newString4, "[ ]", "")
return(newString5)
}
calcDifferences <- function(rhymeScheme, letters, index){
return(diff(grep(substr(letters, index, index), rhymeScheme)))
}
returnMax <- function(numberList){
numbers <- unlist(numberList)
return(max(numbers))
}
checkIfInternalRhymePrint2 <- nullToNA(checkIfInternalRhymePrint)
library(tidyr)
checkIfInternalRhymePrint3 <- cbind(checkIfInternalRhymePrint2)
checkIfInternalRhymePrint4 <- as.data.frame(checkIfInternalRhymePrint3)
checkIfInternalRhymePrint4[is.na(checkIfInternalRhymePrint4)] <- FALSE
indices <- which(checkIfInternalRhymePrint4 == TRUE)
internalRhymesFinal <- rhymeSchemes[indices]
uniqchars <- function(string1){ unique(unlist(strsplit(string1, "")))}
iteration <- 1:length(internalRhymesFinal)
iteration <- cbind(iteration)
findUniqueChars <- apply(iteration, 1, function(x){uniqchars(internalRhymesFinal[[x]])})
removeAmbiguousChars <- apply(iteration, 1, function(x){removeAmbiguousCharsFunc(toString(findUniqueChars[[x]]))})
lengthsOfLetters <- apply(iteration, 1, function(x){return(nchar(removeAmbiguousChars[[x]]))})
saveDifferencesFinal <- apply(iteration, 1, function(x){calcDifferences(internalRhymesFinal[[x]], removeAmbiguousChars[[x]], lengthsOfLetters[x])})
maxDistances <- apply(iteration, 1, function(x){returnMax(saveDifferencesFinal[[x]])})
findMaxFinal <- max(maxDistances)
findIndexMaxFinal <- which(maxDistances == findMaxFinal)
maxInternalRhymeDifference <- internalRhymesFinal[[findIndexMaxFinal]]
iteration <- 1:length(replaceWithRepeatingPrint)
iteration <- cbind(iteration)
saveDifferences <- apply(iteration, 1, function(x){getIndices(replaceWithRepeatingPrint[[x]], renameRhymeSchemes[[x]])})
saveDifferences
saveDifferencesFinal
findMaxFinal
maxInternalRhymeDifference
findTableWithMaxDifference
getwd()
setwd("/Users/robbyice/Desktop/GTPortfolio/humdrumRRobert")
getwd()
etwd("/Users/robbyice/Desktop/GTPortfolio/humdrumR")
setwd("/Users/robbyice/Desktop/GTPortfolio/humdrumR")
mcf <- readHumdrum('.*rap')
spinePipe(mcf, 2:8, 1) -> mcf[rev(c('Stress', 'Tone', 'Break', 'Rhyme', 'IPA', 'Lyrics', 'Hype'))]
mcf$Token %hum>% c(~segments(Break %in% c('3', '4','5')), by ~ File) -> mcf$Phrase
mcf$Token %hum<% c(~list(paste(Lyrics, collapse = ' ')), by ~ File ~ Phrase)
rhymeSchemes <- mcf$Token %hum<% c(~list(Rhyme), by ~ File ~ Phrase)
countFrequencies <- function(element){
frequencyCount <- unlist(element)
frequencyCount <- table(frequencyCount)
return(frequencyCount)
}
recordMoreThanOneInstance <- function(table){
saveList <- unlist(table)
saveList <- as.data.frame(saveList)
saveList <- t(saveList)
determine <- which(saveList > 1)
saveList <- as.data.frame(saveList)
internalRhymes <- saveList[determine]
return(internalRhymes)
}
recordFreqDifference <- function(table){
if(NCOL(table$internalRhymesList) == 0){
return(0)
}
# record frequency difference between non rhyming words and the most frequent internal rhyme
df <- as.data.frame(table)
nonRhymingWordFrequency <- df[,1]
vector <- which(colnames(table$internalRhymesList) != ".")
if(length(vector) >= 1){
maxInternalRhyme <- min(table$internalRhymesList[,vector])
maxInternalRhymeIndex <- which(table$internalRhymesList == maxInternalRhyme)
difference <- nonRhymingWordFrequency - maxInternalRhyme
}
else{
return(0)
}
return(difference)
}
# implement functions
iteration <- 1:length(rhymeSchemes)
iteration <- cbind(iteration)
df <- rbind(rhymeSchemes)
df <- as.data.frame(t(df))
frequencyTables <- apply(iteration, 1, function(x){countFrequencies(df[x,1])})
frequencyTablesDataFrame <- cbind(frequencyTables)
internalRhymesList <- apply(iteration, 1, function(x){recordMoreThanOneInstance(frequencyTablesDataFrame[x][1])})
internalRhymesListDataFrame <- rbind(internalRhymesList)
internalRhymesListDataFrame <- as.data.frame(internalRhymesListDataFrame)
save <- apply(iteration, 1, function(x){as.data.frame(internalRhymesListDataFrame[1,x])})
findMaxDifference <- apply(iteration, 1, function(x){recordFreqDifference(internalRhymesListDataFrame[1,x])})
findMaxDifference
maxDifference <- max(findMaxDifference)
tableWithMaxDifference <- which(findMaxDifference == maxDifference)
tableWithMaxDifference
findTableWithMaxDifference <- frequencyTables[tableWithMaxDifference]
findTableWithMaxDifference
